#!/bin/bash
#
# Copyright 2017 MonRÃ¡
#

XIOTDIR="$(cd "$(dirname "$0")" && pwd)"
NAME=`basename $0`

help()
{
	cat << EOF

Start or stop the XIoT network testing services.

usage: $NAME [-cgCGmdtr] [-c <clients_per_router>] [-g <gateways_per_router>] [-m <motes_per_gateway>]
             [-C <client_routers>] [-G <gateway_routers>] [-r <resquests>]
             [-t <timeout>] [-d <data_size>]  [start|stop|kill|prune|single|build|print|manual]
where:
  -c Clients per Clients Routers
  -g Gateways per Gateways Routers
  -m Motes per Gateway
  -C Client Routers
  -G Gateway Routers
  -l Data size (bytes) # Datagram Payload Size
  -r Requests # Number of requests of each client
  -t Timeout (s) # Gateway to UDP network. There is no timeout on XIA network
  -v Data Volume # Folder name
  -d Delay (s) # Base delay variable for initializations
  
  start   - starts the networks and containers
  stop    - stops all containers
  kill    - kills all containers
  prune   - prune networks and volumes
  build   - build images
  print   - prints configuration
  single  - start in a single network (no routers)

EOF
	exit 0
}

setup()
{
	CLIENTS=1
	CLIENTROUTERS=1
	GATEWAYS=1
	GATEWAYROUTERS=1
	MOTES=1
	TIMEOUT=1
	DATASIZE=8
	REQUESTS=10
	DELAY=10
	
	FIA=xia
	
	CLIENTIMAGE=$FIA-client
	GATEWAYIMAGE=$FIA-gateway
	CLIENTROUTERIMAGE=$FIA-router
	GATEWAYROUTERIMAGE=$FIA-router
	SERVERIMAGE=$FIA-server
	
	DATAVOLUME=xiotvolume

	local OPTARG=$2

	while getopts "c:g:C:G:m:d:t:r:v:l:" opt; do
		case $opt in			
			c)
				CLIENTS=$OPTARG
				;;
			g)
				GATEWAYS=$OPTARG
				;;
			C)
				CLIENTROUTERS=$OPTARG
				;;
			G)
				GATEWAYROUTERS=$OPTARG
				;;
			m)
				MOTES=$OPTARG
				;;
			d)
				DELAY=$OPTARG
				;;
			t)
				TIMEOUT=$OPTARG
				;;
			r)
				REQUESTS=$OPTARG
				;;
			v)
				DATAVOLUME=$OPTARG
				;;
			l)
				DATASIZE=$OPTARG
				;;			
			h)
				help
				;;
			\?)
				printf "\nInvalid option: -$OPTARG\n" >&2
				help
				;;
		esac
	done
}

print_config()
{
	echo
	echo "Config:"
	echo
	echo "Clients: $CLIENTS"
	echo "Gateways: $GATEWAYS"
	echo "Client Routers: $CLIENTROUTERS"
	echo "Gateway Routers: $GATEWAYROUTERS"
	echo "Motes: $MOTES"
	echo "Timeout: $TIMEOUT s"
	echo "Requests: $REQUESTS"
	echo "Datasize: $DATASIZE bytes"
	echo "Delay: $DELAY s"
	echo "UDP Timeout: $TIMEOUT s"
	echo
	echo "Future Internet Architecture: $FIA"
	echo
	echo "Server Image: $SERVERIMAGE"
	echo "Gateway Router Image: $GATEWAYROUTERIMAGE"
	echo "Client Router Image: $CLIENTROUTERIMAGE"
	echo "Gateway Image: $GATEWAYIMAGE"
	echo "Client Image: $CLIENTIMAGE"
	echo
	echo "Data Volume: $DATAVOLUME"
	echo
}

stop_all()
{
	echo "Stoping containers"
	docker stop $(docker ps -a -q)
	docker rm $(docker ps -a -q)
	echo
}

kill_all()
{
	echo "Stoping containers"
	docker kill $(docker ps -a -q)
	docker rm $(docker ps -a -q)
	echo
}

prune_networks()
{
	docker network prune
}

prune_volumes()
{
	echo "Deleting Volume"
	docker volume rm $DATAVOLUME
	echo
	docker volume prune
}

build_all()
{
	cd $XIOTDIR/docker

	cd $FIA-base
	docker build -t $FIA-base .
	cd ..

	cd $SERVERIMAGE
	docker build -t $SERVERIMAGE .
	cd ..
	
	cd $GATEWAYROUTERIMAGE
	docker build -t $GATEWAYROUTERIMAGE .
	cd ..
	
	cd $CLIENTROUTERIMAGE
	docker build -t $CLIENTROUTERIMAGE .
	cd ..

	cd $GATEWAYIMAGE
	docker build -t $GATEWAYIMAGE .
	cd ..
	
	cd $CLIENTIMAGE
	docker build -t $CLIENTIMAGE .
	cd ..
}

star_topology()
{	
	echo "Data Volume"
	docker volume create $DATAVOLUME
	echo	
	
	echo "Server Network"
	docker network create Server_Network	
	echo
		
	echo "Server"
	docker run -v $DATAVOLUME:/$DATAVOLUME -itd -e DELAY=$DELAY --net=Server_Network --name Server $SERVERIMAGE	
	echo
		
	for i in $(seq 1 $GATEWAYROUTERS)
	do
		echo "Gateways_Network_$i"
		docker network create Gateways_Network_$i		
		echo
		
		echo "Gateway Router $i"   		
		docker run -v $DATAVOLUME:/$DATAVOLUME -itd -e DELAY=$DELAY --net=Gateways_Network_$i --name Gateway_Router_$i $GATEWAYROUTERIMAGE	
		docker network connect Server_Network Gateway_Router_$i
		echo	
			
		for j in $(seq 1 $GATEWAYS)
		do      
	   		z="$(( $GATEWAYS * ( $i - 1 ) + $j ))"		
	   		echo "Gateway $z"					
	   		docker run -v $DATAVOLUME:/$DATAVOLUME -itd -e TIMEOUT=$TIMEOUT -e DELAY=$DELAY -e GATEWAYROUTER=$i -e GATEWAY=$z --sysctl net.ipv6.conf.all.disable_ipv6=0 --privileged --net=Gateways_Network_$i --name Gateway_$z $GATEWAYIMAGE
	   		echo
	   	done
	done
	
	for i in $(seq 1 $CLIENTROUTERS)
	do
		echo "Clients_Network_$i"
		docker network create Clients_Network_$i		
		echo
		
		echo "Client Router $i"	
		docker run -v $DATAVOLUME:/$DATAVOLUME -itd -e DELAY=$DELAY --net=Clients_Network_$i --name Client_Router_$i $CLIENTROUTERIMAGE		
			docker network connect Server_Network Client_Router_$i	
		echo
		
		for j in $(seq 1 $CLIENTS)
		do
			z="$(( $CLIENTS * ( $i - 1 ) + $j ))"		
			echo "Client $z"
			docker run -it -v $DATAVOLUME:/$DATAVOLUME --net=Clients_Network_$i -e DELAY=$DELAY -e MOTES=$MOTES -e GATEWAYS=$GATEWAYS -e GATEWAYROUTERS=$GATEWAYROUTERS -e DATASIZE=$DATASIZE -e REQUESTS=$REQUESTS --name Client_$z $CLIENTIMAGE
			echo
		done
	done
}	

single_network()
{
	echo "Starting Server"
	docker run -itd xia-server	
	echo
	for i in `seq 1 $GATEWAYS`;
	do
		echo "Starting Gateway"
		docker run -v $DATAVOLUME:/$DATAVOLUME -itd -e TIMEOUT=$TIMEOUT -e GATEWAYROUTERS=$GATEWAYROUTERS -e DELAY=$DELAY -e GATEWAYROUTER=1 -e GATEWAY=$i --sysctl net.ipv6.conf.all.disable_ipv6=0 --privileged --name Gateway_$i $GATEWAYIMAGE
		echo
	done
	for i in `seq 1 $CLIENTS`;
	do
		echo "Starting Client"
		docker run -it -v $DATAVOLUME:/$DATAVOLUME -e DELAY=$DELAY -e MOTES=$MOTES -e GATEWAYS=$GATEWAYS -e GATEWAYROUTERS=$GATEWAYROUTERS -e DATASIZE=$DATASIZE -e REQUESTS=$REQUESTS --name Client_$i $CLIENTIMAGE
		echo
	done
}

manual_network()
{
	docker volume create xiotvolume
	
	docker network create servernet	
	docker network create gatewaynet		
	docker network create clientnet	
	
	docker run -itd --net=servernet -v xiotvolume:/xiotvolume -e DELAY=30 xia-server
	
	docker run -itd --net=gatewaynet -v xiotvolume:/xiotvolume -e DELAY=30 --name gatewayrouter xia-router
	docker network connect servernet gatewayrouter
	
	docker run -itd --net=gatewaynet -v xiotvolume:/xiotvolume -e TIMEOUT=1 -e DELAY=30 -e GATEWAYROUTER=1 -e GATEWAY=1 --sysctl net.ipv6.conf.all.disable_ipv6=0 --privileged xia-gateway	
	
	docker run -itd --net=clientnet -v xiotvolume:/xiotvolume -e DELAY=30 --name clientrouter xia-router
	docker network connect servernet clientrouter
	
	docker run -it --net=clientnet -v xiotvolume:/xiotvolume -e MOTES=1 -e DELAY=30 -e GATEWAYS=1 -e GATEWAYROUTERS=1 -e DATASIZE=8 -e REQUESTS=10 xia-client
}

#
# SCRIPT STARTS HERE
#
setup $@
shift $((OPTIND-1))

case $1 in
	manual)		
		manual_network
		;;
	single)
		print_config
		single_network
		;;
	print)
		print_config
		;;
	start)
		print_config
		star_topology
		;;
	build)
		build_all
		;;
	prune)
		prune_networks
		prune_volumes
		;;
	stop)
		stop_all
		prune_networks
		prune_volumes
		;;
	kill)
		kill_all
		prune_networks	
		prune_volumes
		;;
	*)
		printf "\nInvalid command\n" >&2
		help
		;;
esac


