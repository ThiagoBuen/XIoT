#!/bin/bash
#
# Copyright 2017 MonRÃ¡
#

XIOTDIR="$(cd "$(dirname "$0")" && pwd)"
NAME=`basename $0`

help()
{
	cat << EOF

Start or stop the XIoT network testing services.

usage: $NAME [-cgCGmdtr] [-c <clients_per_router>] [-g <gateways_per_router>] [-m <motes_per_gateway>]
             [-C <client_routers>] [-G <gateway_routers>] [-r <resquests>]
             [-t <timeout>] [-d <data_size>]  [start|stop|restart|kill]
where:
  -c Clients per Clients Routers
  -g Gateways per Gateways Routers
  -m Motes per Gateway
  -C Client Routers
  -G Gateway Routers
  -d Data size (bytes)
  -r Requests
  -t Timeout (ms)
  
  start   - starts the network processes if not already running
  stop    - stops the processes
  restart - stops then starts the processes
  kill    - kill all services including orphaned services

EOF
	exit 0
}

setup()
{
	CLIENTS=1
	CLIENTROUTERS=1
	GATEWAYS=1
	GATEWAYROUTERS=1
	MOTES=2
	TIMEOUT=1000
	DATASIZE=8
	REQUESTS=1
	
	FIA=xia
	
	CLIENTIMAGE=$FIA-client
	GATEWAYIMAGE=$FIA-gateway
	CLIENTROUTERIMAGE=$FIA-router
	GATEWAYROUTERIMAGE=$FIA-router
	SERVERIMAGE=$FIA-server

	local OPTARG=$2

	while getopts "c:g:C:G:m:d:t:r" opt; do
		case $opt in			
			c)
				CLIENTS=$OPTARG
				;;
			g)
				GATEWAYS=$OPTARG
				;;
			C)
				CLIENTROUTERS=$OPTARG
				;;
			G)
				GATEWAYROUTERS=$OPTARG
				;;
			m)
				MOTES=$OPTARG
				;;
			d)
				DATASIZE=$OPTARG
				;;
			t)
				TIMEOUT=$OPTARG
				;;
			r)
				REQUESTS=$OPTARG
				;;			
			h)
				help
				;;
			\?)
				printf "\nInvalid option: -$OPTARG\n" >&2
				help
				;;
		esac
	done
}

print_config()
{
	echo
	echo Config:
	echo
	echo Clients: $CLIENTS
	echo Gateways: $GATEWAYS
	echo Client Routers: $CLIENTROUTERS
	echo Gateway Routers: $GATEWAYROUTERS
	echo Motes: $MOTES
	echo Timeout: $TIMEOUT ms
	echo Requests: $REQUESTS
	echo Datasize: $DATASIZE bytes
	echo
	echo Future Internet Architecture: $FIA
	echo
	echo Server Image: $SERVERIMAGE
	echo Gateway Router Image: $GATEWAYROUTERIMAGE
	echo Client Router Image: $CLIENTROUTERIMAGE
	echo Gateway Image: $GATEWAYIMAGE
	echo Client Image: $CLIENTIMAGE
	echo
}

stop_all()
{
	echo "Stoping containers"
	docker stop $(docker ps -a -q)
	docker rm $(docker ps -a -q)
	echo
}

kill_all()
{
	echo "Stoping containers"
	docker kill $(docker ps -a -q)
	docker rm $(docker ps -a -q)
	echo
}

prune_networks()
{
	docker network prune
}

prune_volumes()
{
	echo "Deleting Volume"
	docker volume rm xiotvolume
	echo
	docker volume prune
}

build_all()
{
	cd $XIOTDIR/docker

	cd $FIA-base
	docker build -t $FIA-base .
	cd ..

	cd $SERVERIMAGE
	docker build -t $SERVERIMAGE .
	cd ..
	
	cd $GATEWAYROUTERIMAGE
	docker build -t $GATEWAYROUTERIMAGE .
	cd ..
	
	cd $CLIENTROUTERIMAGE
	docker build -t $CLIENTROUTERIMAGE .
	cd ..

	cd $GATEWAYIMAGE
	docker build -t $GATEWAYIMAGE .
	cd ..
	
	cd $CLIENTIMAGE
	docker build -t $CLIENTIMAGE .
	cd ..
}

star_topology()
{
	echo Data Volume
	docker volume create xiotvolume
	echo
	echo Server Network
	docker network create Server_Network
	echo
	echo Server
	docker run -v xiotvolume:/xiotvolume -d --net=Server_Network --name Server $SERVERIMAGE
	sleep 10 
	echo
	for i in $(seq 1 $GATEWAYROUTERS)
	do
		echo Gateway_Network_$i
		docker network create Gateway_Network_$i
		echo
		echo "Gateway Router $i"   		
		docker run -v xiotvolume:/xiotvolume -d --net=Gateway_Network_$i --name Gateway_Router_$i $GATEWAYROUTERIMAGE
		echo
		docker network connect Server_Network Gateway_Router_$i
		#sleep 5
		for j in $(seq 1 $GATEWAYS)
		do      
	   		z="$(( $GATEWAYS * ( $i - 1 ) + $j ))"	   		
	   		echo "Gateway $z"
	   		docker run -v xiotvolume:/xiotvolume -d --net=Gateway_Network_$i --name Gateway_$i $GATEWAYIMAGE
	   		echo
	   	done
	done
	sleep 5
	for i in $(seq 1 $CLIENTROUTERS)
	do
		echo Client_Network_$i
		docker network create Client_Network_$i	
		echo		
		echo "Clients Router $i"	
		docker run -v xiotvolume:/xiotvolume -d --net=Client_Network_$i --name Client_Router_$i $CLIENTROUTERIMAGE
		echo
		docker network connect Server_Network Client_Router_$i
		#sleep 5
		for j in $(seq 1 $CLIENTS)
		do
			z="$(( $CLIENTS * ( $i - 1 ) + $j ))"
			echo "Client $z"
			docker run -v xiotvolume:/xiotvolume --net=Client_Network_$i --name Client_$z $CLIENTIMAGE    
			echo
		done
	done
}

timeex()
{
	docker run -d xia-server

	sleep 5

	for i in `seq 1 $GATEWAYS`;
	do
	    docker run -d $GATEWAYIMAGE &
	done

	sleep 5

	for i in `seq 1 $CLIENTS`;
	do
 	   docker run $CLIENTIMAGE &
	done
}

manual_network()
{
	docker network create servernet
	docker network create clientnet
	docker network create gatewaynet
	
	docker run -itd --net=servernet --name server xia-base
	docker run -itd --net=gatewaynet --name gateway xia-base
	docker run -itd --net=gatewaynet --name gatewayrouter xia-base
	docker run -itd --net=clientnet --name client xia-base
	docker run -itd --net=clientnet --name clientrouter xia-base
	
	docker network connect servernet gatewayrouter
	docker network connect servernet clientrouter
}

#
# SCRIPT STARTS HERE
#
setup $@
shift $((OPTIND-1))

case $1 in
	manual)		
		manual_network
		;;
	time)
		print_config
		timeex
		;;
	print)
		print_config
		;;
	start)
		print_config
		star_topology
		;;
	build)
		build_all
		;;
	prune)
		prune_networks
		prune_volumes
		;;
	stop)
		stop_all
		prune_networks
		prune_volumes
		;;
	kill)
		kill_all
		prune_networks	
		prune_volumes
		;;
	*)
		printf "\nInvalid command\n" >&2
		help
		;;
esac


