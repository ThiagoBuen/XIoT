#!/usr/bin/python
import sys
import os
import time

import string
import random

# find the path to xia-core
XIADIR=os.getcwd()
while os.path.split(XIADIR)[1] != 'xia-core':
    XIADIR=os.path.split(XIADIR)[0]
sys.path.append(XIADIR + '/api/lib')

from c_xsocket import *

MAXLEN = 120

def main():
	if len(sys.argv) == 3:
		if sys.argv[1] == "-t":
			echoterminal()
		else:
			usage()
	elif len(sys.argv) != 6:
		usage()
	else:
		echotester()

def usage():
    sys.stdout = sys.stderr
    print 'Usage: echotester motes gateways gatewayrouters datasize requests'
    print 'Or: echotester -t hostname'
    sys.exit(2) 
    
def echoterminal():
	NAME = sys.argv[2]
	try:
		sock = Xsocket(XSOCK_DGRAM)
		dag = XgetDAGbyName(NAME)
		while (1):
			print "Please enter the message (blank line to exit):"
			text = sys.stdin.readline()
			text = text.strip()
			if (len(text) == 0):
				break
			latency = time.time() * 1000
			Xsendto(sock, text, 0, dag)
			(data, sdag) = Xrecvfrom(sock, MAXLEN, 0)
			latency = (time.time() * 1000) - latency
			print "received", len(data), "bytes from", sdag,":", data   			
			print "latency: %d ms" % latency	
		Xclose(sock)
	except:
		print "Xsocket error"
		

def echotester():
	MOTES =  int(sys.argv[1])	
	GATEWAYS = int(sys.argv[2])
	GATEWAYROUTERS = int(sys.argv[3])
	DATASIZE = int(sys.argv[4])	
	REQUESTS = int(sys.argv[5])
	
	REQ = 0
	while REQ < REQUESTS:
		HOSTNAME = str(random.randint(1,MOTES))+"."+str(random.randint(1,GATEWAYS))+"."+str(random.randint(1,GATEWAYROUTERS))
		print HOSTNAME
		sock = Xsocket(XSOCK_DGRAM)		
		dag = XgetDAGbyName(HOSTNAME)
		print dag
		
		#DATASIZE = random.randint(1,100)
		
		text = ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(DATASIZE))
		latency = time.time() * 1000
		Xsendto(sock, text, 0, dag)
		REQ = REQ + 1
	
		print REQ, " : sending" , len(text), "bytes to", dag,"\n",HOSTNAME,":", text
	
		(data, sdag) = Xrecvfrom(sock, MAXLEN, 0)	
		latency = (time.time() * 1000) - latency
		Xclose(sock)
	
		print "received", len(data), "bytes from", sdag,":", data   			
		print "latency: %d ms" % latency
		
		if data == text:
			print "success"
		elif data == "udp-timeout":
			print "udp error"
		else:
			print "data error"
			
main()
		
# TODO: CSV

